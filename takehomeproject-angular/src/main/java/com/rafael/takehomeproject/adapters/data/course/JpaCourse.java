package com.rafael.takehomeproject.adapters.data.course;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.stereotype.Service;

import com.rafael.takehomeproject.usecases.courses.boundaries.CourseDTO;
import com.rafael.takehomeproject.usecases.courses.boundaries.CoursesDsGateway;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class JpaCourse implements CoursesDsGateway {
    private final JpaCourseRepository courseRepository;

    @Override
    public List<CourseDTO> listAll() {
        var list = this.courseRepository.findAll();
        List<CourseDTO> courseDTOList = new ArrayList<>();
        list.forEach(course -> {
            courseDTOList.add(new CourseDTO(course.getId(), course.getCourseName(), course.duration));
        });
        return courseDTOList;
    }

    @Override
    @Transactional
    public CourseDTO save(CourseDTO courseDTO) {
        var course = new CourseDataMapper(courseDTO.getId(), courseDTO.getCourseName(), courseDTO.getDuration());
        this.courseRepository.save(course);
        return courseDTO; //That would make more sense if the ID was generated by hibernate
    }

    @Override
    @Transactional
    public void delete(UUID id) {
        this.courseRepository.deleteById(id);
    }

    @Override
    public Optional<CourseDTO> findByCourseName(String courseName) {
        var courseOpt = this.courseRepository.findByCourseName(courseName);
        if (courseOpt.isEmpty())
            return Optional.empty();
        return Optional.of(new CourseDTO(courseOpt.get().getId(), courseOpt.get().getCourseName(), courseOpt.get().duration));
    }
}